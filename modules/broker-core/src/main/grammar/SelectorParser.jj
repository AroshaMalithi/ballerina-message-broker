/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

options {
  STATIC = false;
  UNICODE_INPUT = true;

  // some performance optimizations
  ERROR_REPORTING = false;

}

PARSER_BEGIN(MessageFilter)

/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

package io.ballerina.messaging.broker.core.selector.generated;

import java.io.StringReader;
import io.ballerina.messaging.broker.core.selector.BooleanExpression;
import io.ballerina.messaging.broker.core.selector.EqualityExpression;
import io.ballerina.messaging.broker.core.selector.GreaterThanExpression;
import io.ballerina.messaging.broker.core.selector.GreaterThanOrEqualExpression ;
import io.ballerina.messaging.broker.core.selector.NotEqualExpression;
import io.ballerina.messaging.broker.core.selector.LessThanExpression;
import io.ballerina.messaging.broker.core.selector.LessThanOrEqualExpression;
import io.ballerina.messaging.broker.core.selector.Addition;
import io.ballerina.messaging.broker.core.selector.Subtraction;
import io.ballerina.messaging.broker.core.selector.Multiplication;
import io.ballerina.messaging.broker.core.selector.Division;
import io.ballerina.messaging.broker.core.selector.ConstantExpression;
import io.ballerina.messaging.broker.core.selector.UnaryNegative;
import io.ballerina.messaging.broker.core.selector.Expression;
import io.ballerina.messaging.broker.core.selector.JmsPropertyExpression;

public class MessageFilter {

    public MessageFilter() {
        this(new StringReader(""));
    }

    public MessageFilter(String selectorString) {
        this(new StringReader(selectorString));
    }

    public BooleanExpression parse() throws Exception {
        return parseSelector();
    }

}

PARSER_END(MessageFilter)
SKIP :
{
  " "|"\t"|"\n"|"\r"
}

TOKEN [IGNORE_CASE] :
{
    <  NOT     : "NOT">
  | <  AND     : "AND">
  | <  OR      : "OR">
  | <  BETWEEN : "BETWEEN">
  | <  LIKE    : "LIKE">
  | <  ESCAPE  : "ESCAPE">
  | <  IN      : "IN">
  | <  IS      : "IS">
  | <  TRUE    : "TRUE" >
  | <  FALSE   : "FALSE" >
  | <  NULL    : "NULL" >
}

TOKEN [IGNORE_CASE] :
{
    <NUMERIC_LITERAL: (["0"-"9"])+(["L"])?>
   | <STRING_LITERAL: "'" (("''") | ~["'"] )* "'">
   | < FLOATING_POINT_LITERAL:
             (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
           | "." (["0"-"9"])+ (<EXPONENT>)?
           | (["0"-"9"])+ <EXPONENT>
       >
     | < #EXPONENT: "E" (["+","-"])? (["0"-"9"])+ >
}

TOKEN :
{
    <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_","$"])*>
}

TOKEN :
    {
     < EQUAL: "=" >
    | < GTREATER: ">" >
    | < LESS: "<" >
    | < GTEATERorEQAL: ">=" >
    | < LESSorEQUAL: "=<" >
    | < NOTEQUAL: "<>" >
    }


BooleanExpression parseSelector() :
{ BooleanExpression value; }
{
     value=ComparisonExpression() <EOF>
     { return value; }
}


BooleanExpression ComparisonExpression() :
{
    BooleanExpression value;
 }
   {
   (
     value = Term()

     )

     { return value;}

   }

BooleanExpression Term() :
{
    BooleanExpression value;
    Expression left;
    Expression right;

}
{
    left = sum()
    (
        <EQUAL> right = unary(){ value = new EqualityExpression(left , right);}
       | <GTREATER> right= unary()  { value= new GreaterThanExpression(left , right); }
       | <GTEATERorEQAL> right= unary()  { value= new GreaterThanOrEqualExpression(left , right); }
       |  <LESS> right= unary()  { value= new LessThanExpression(left , right); }
       |  <LESSorEQUAL> right= unary()  { value= new LessThanOrEqualExpression(left , right); }
       | <NOTEQUAL> right = unary() { value = new NotEqualExpression(left , right);}



    )
    { return value; }
}


Expression sum() :
{
 Expression first;
 Expression second;

}

{
   first = factor()
   (
   (
    "+"second= factor(){ first = new Addition(first , second);}
    | "-"second = factor(){ first = new Subtraction(first , second);}

     )
     )*

     {return first;}

}

Expression factor() :
{
  Expression first;
  Expression second;
}
{
   first = unary()
   (
      (
       "*"second= unary(){ first = new  Multiplication(first , second);}
       | "/"second = unary(){ first = new  Division(first , second);}

       )
   )*
        {return first;}


}
Expression unary() :
{
  Expression first;
}
{
    (

       "+" first = element()
       | "-" first = element(){ first = new UnaryNegative(first);}
       | first = element()
    )

    {return first;}
}


Expression element() :
{
 Expression first;
}
{
   (
     first =identifier()
     | first = value()
     |"(" first = sum() ")"
   )
   {return first;}

}
Expression identifier() :
{
    Token t;
    Expression expr;
}
{
    (
        t = <IDENTIFIER>
        {
            expr = new JmsPropertyExpression(t.image);
        }
    )
    {
        return expr;
    }
}

Expression value() :
{
    Expression expr;
}
{
    (
        expr = stringLiteral()
        | expr = numericLiteral()
        | expr = floatingPointLiteral()
        )

    {
        return expr;
    }
}

Expression stringLiteral() :
{
    Token t;
    Expression expr;
}
{
    t = <STRING_LITERAL>
    {
        String text = t.image;
        char[] charArray = new char[text.length()-2];
        for (int i = 1; i < text.length() - 1; i++) {
            charArray[i-1] = text.charAt(i);
        }
        expr = new ConstantExpression(new String(charArray));
    }
    {
        return expr;
    }
}

Expression numericLiteral() :
{
    Token t;
    Expression expr;
}
{
    t = <NUMERIC_LITERAL>
    {
        String text = t.image;
        expr = ConstantExpression.createFromNumericInteger(text);
    }
    {
        return expr;
    }
}

Expression floatingPointLiteral():
{
  Token t;
  Expression expr;
}
{
    t= <FLOATING_POINT_LITERAL>
    {
       String text = t.image;
       expr = ConstantExpression.createFromNumericInteger(text);
    }
    {
     return expr;
    }
}
