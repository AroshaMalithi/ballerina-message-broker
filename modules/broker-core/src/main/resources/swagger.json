{
  "swagger" : "2.0",
  "info" : {
    "description" : "Message Broker Management API",
    "version" : "1.0.0",
    "title" : "Broker Admin API",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath" : "/broker/v.1.0",
  "schemes" : [ "https", "http" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/queues" : {
      "get" : {
        "summary" : "Get all queues",
        "description" : "Gets metadata of all the queues in the broker. This includes durable \nand non durable queues. \n",
        "operationId" : "getAllQueues",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "durable",
          "in" : "query",
          "description" : "filter queues by durability",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of queues",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/QueueMetadata"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a queue",
        "operationId" : "createQueue",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Queue create request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QueueCreateRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Queue created.",
            "schema" : {
              "$ref" : "#/definitions/QueueCreateResponse"
            }
          },
          "400" : {
            "description" : "Bad Request. Invalid request or validation error.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "415" : {
            "description" : "Unsupported media type. The entity of the request was in a not supported format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/{queueName}" : {
      "get" : {
        "summary" : "Get a specific queue",
        "description" : "Gets metadata of the specified queue.",
        "operationId" : "getQueue",
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "description" : "Name of the queue",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Metadata of the queue",
            "schema" : {
              "$ref" : "#/definitions/QueueMetadata"
            }
          },
          "404" : {
            "description" : "Queue not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete the specified queue.",
        "description" : "Delete the specified queue if the queue exists in the broker and the query param properties ifUnused and ifEmpty are satisfied.",
        "operationId" : "deleteQueue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "description" : "Name of the queue",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ifUnused",
          "in" : "query",
          "description" : "If set to true, queue will be deleted only if the queue has no active consumers.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "ifEmpty",
          "in" : "query",
          "description" : "If set to true, queue will be deleted only if the queue is empty.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Queue deleted"
          },
          "400" : {
            "description" : "Bad request. Invalid request or validation error.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Queue not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/{queueName}/consumers" : {
      "get" : {
        "summary" : "Get all consumers of a queue",
        "description" : "Retrieves all the consumers for the queue",
        "operationId" : "getAllConsumersForQueue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "description" : "Name of the queue",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Consumers of the queue",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ConsumerMetadata"
              }
            }
          },
          "404" : {
            "description" : "Queue not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queues/{queueName}/consumers/{consumerId}" : {
      "get" : {
        "summary" : "Get a specific consumer",
        "description" : "Retrieves a specific consumer for a given queue",
        "operationId" : "getConsumer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "description" : "Name of the queue",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "consumerId",
          "in" : "path",
          "description" : "Unique consumer identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Consumers of the queue",
            "schema" : {
              "$ref" : "#/definitions/ConsumerMetadata"
            }
          },
          "404" : {
            "description" : "Queue/Consumer not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "summary" : "delete a consumer",
        "description" : "Delete a specific consumer from a queue",
        "operationId" : "deleteConsumer",
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "description" : "Name of the queue",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "consumerId",
          "in" : "path",
          "description" : "Unique consumer identifier",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Consumer deleted"
          },
          "404" : {
            "description" : "Queue/Consumer not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/exchanges" : {
      "get" : {
        "summary" : "Get all exchanges",
        "description" : "Retrieves all the exchanges in the broker",
        "operationId" : "getAllExchanges",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of exchanges",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExchangeMetadata"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create an exchange",
        "operationId" : "createExchange",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Exchange create request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExchangeCreateRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Exchange created"
          },
          "400" : {
            "description" : "Bad Request. Invalid request or validation error.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "415" : {
            "description" : "Unsupported media type. The entity of the request was in a not supported format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/exchanges/{exchangeName}" : {
      "get" : {
        "summary" : "Get a specific exchange",
        "description" : "Retrieves the exchange metadata for the specific exchange",
        "operationId" : "getExchange",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "exchangeName",
          "in" : "path",
          "description" : "Name of the exchange.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Metadata of the exchange",
            "schema" : {
              "$ref" : "#/definitions/ExchangeMetadata"
            }
          },
          "404" : {
            "description" : "Exchange not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete exchnage",
        "description" : "Delete the exchange with the specified exchange name",
        "operationId" : "deleteExchange",
        "parameters" : [ {
          "name" : "exchangeName",
          "in" : "path",
          "description" : "Name of the exchange.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Exchange deleted"
          },
          "400" : {
            "description" : "Bad request. Invalid request or validation error.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Exchange not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/exchanges/{exchangeName}/bindings" : {
      "get" : {
        "summary" : "Get bindings of a exchange",
        "description" : "Retrieves the bindings set of the exchange",
        "operationId" : "getAllBindingsForExchange",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "exchangeName",
          "in" : "path",
          "description" : "Name of the exchange.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Bindings",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BindingInfo"
              }
            }
          },
          "404" : {
            "description" : "Exchange not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a binding",
        "description" : "Create a binding for a queue",
        "operationId" : "createBinding",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "exchangeName",
          "in" : "path",
          "description" : "Name of the exchange.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Payload of binding creation request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BindingInfo"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Binding created"
          },
          "400" : {
            "description" : "Bad Request. Invalid request or validation error.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Exchange not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "415" : {
            "description" : "Unsupported media type. The entity of the request was in a not supported format.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "ConsumerMetadata" : {
      "type" : "object",
      "required" : [ "consumerTag", "flowEnabled", "id", "isExclusive" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "description" : "unique id of the consumer"
        },
        "consumerTag" : {
          "type" : "string",
          "description" : "identifier given by the channel"
        },
        "isExclusive" : {
          "type" : "boolean",
          "description" : "State whether only this consumer can consume from the queue."
        },
        "flowEnabled" : {
          "type" : "boolean",
          "description" : "State whether the consumers is actively consuming messages"
        }
      },
      "title" : "Consumer Metadata"
    },
    "QueueCreateRequest" : {
      "type" : "object",
      "required" : [ "autoDelete", "durable", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the queue to be created"
        },
        "durable" : {
          "type" : "boolean",
          "description" : "True if the queue is durable, false otherwise"
        },
        "autoDelete" : {
          "type" : "boolean",
          "description" : "deletes the queue when there are no consumers for the queue."
        }
      },
      "title" : "Queue Create Request"
    },
    "QueueMetadata" : {
      "type" : "object",
      "required" : [ "autoDelete", "capacity", "consumerCount", "durable", "name", "size" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the queue. This is a unique value"
        },
        "consumerCount" : {
          "type" : "integer",
          "description" : "number of active consumers assigned to the queue. Messages will be dispatched in a round robing manner to the consumers."
        },
        "durable" : {
          "type" : "boolean",
          "description" : "durability of the queue. True if the queue is durable and false otherwise. Durable queues will survive node failures."
        },
        "capacity" : {
          "type" : "integer",
          "description" : "Maximum number of messages the queue can hold. Durable queues are unbounded and will specify the integer max value (2,147,483,647) as the capacity."
        },
        "size" : {
          "type" : "integer",
          "description" : "Number of messages in the queue."
        },
        "autoDelete" : {
          "type" : "boolean",
          "description" : "If set to true queue will get deleted once all the consumers of the queue get disconnected."
        }
      },
      "title" : "Queue Metadata"
    },
    "QueueCreateResponse" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "Response message with status of the queue create request."
        }
      },
      "title" : "Queue Create Response"
    },
    "ExchangeMetadata" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the exchange"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of exchange.  for instance amq.direct, amq.topic"
        },
        "durable" : {
          "type" : "boolean",
          "description" : "True if the exchange is durable and false otherwise"
        }
      },
      "title" : "Exchange Metadata"
    },
    "ExchangeCreateRequest" : {
      "type" : "object",
      "required" : [ "durable", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the exchange. This should be a unique value"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of exchange"
        },
        "durable" : {
          "type" : "boolean",
          "description" : "States whether the exchange is durable or not"
        }
      },
      "title" : "Exchange Create Request"
    },
    "BindingInfo" : {
      "type" : "object",
      "required" : [ "queueName", "routingKey" ],
      "properties" : {
        "routingKey" : {
          "type" : "string",
          "description" : "Routing pattern of the binding"
        },
        "queueName" : {
          "type" : "string",
          "description" : "Bound queue name"
        },
        "filterExpression" : {
          "type" : "string",
          "description" : "message filtering expression"
        }
      },
      "title" : "Binding Information"
    },
    "Error" : {
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int64"
        },
        "message" : {
          "type" : "string",
          "description" : "Error message."
        }
      },
      "title" : "Error Response"
    }
  }
}